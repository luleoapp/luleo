<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Flowing Psychedelic Background</title>
    <style>
        body, html {
            margin: 0;
            padding: 0;
            height: 100%;
            overflow: hidden;
        }
        #canvas {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: -1;
        }
    </style>
</head>
<body>
    <canvas id="canvas"></canvas>
    <script>
        const canvas = document.getElementById('canvas');
        const ctx = canvas.getContext('2d');

        let width, height;
        let time = 0;
        const particles = [];
        const numParticles = 5000;
        const noiseScale = 0.005;

        function resizeCanvas() {
            width = window.innerWidth;
            height = window.innerHeight;
            canvas.width = width;
            canvas.height = height;
        }

        class Particle {
            constructor() {
                this.x = Math.random() * width;
                this.y = Math.random() * height;
                this.prevX = this.x;
                this.prevY = this.y;
                this.hue = Math.random() * 360;
                this.size = Math.random() * 2 + 1;
            }

            update() {
                this.prevX = this.x;
                this.prevY = this.y;

                let angle = noise(this.x * noiseScale, this.y * noiseScale, time) * Math.PI * 2;
                this.x += Math.cos(angle) * 2;
                this.y += Math.sin(angle) * 2;

                if (this.x < 0) this.x = width;
                if (this.x > width) this.x = 0;
                if (this.y < 0) this.y = height;
                if (this.y > height) this.y = 0;

                this.hue = (this.hue + 0.5) % 360;
            }

            draw() {
                ctx.beginPath();
                ctx.moveTo(this.prevX, this.prevY);
                ctx.lineTo(this.x, this.y);
                ctx.strokeStyle = `hsla(${this.hue}, 100%, 50%, 0.1)`;
                ctx.lineWidth = this.size;
                ctx.stroke();
            }
        }

        function noise(x, y, z) {
            const X = Math.floor(x) & 255;
            const Y = Math.floor(y) & 255;
            const Z = Math.floor(z) & 255;

            x -= Math.floor(x);
            y -= Math.floor(y);
            z -= Math.floor(z);

            const u = fade(x);
            const v = fade(y);
            const w = fade(z);

            const A = p[X  ]+Y, AA = p[A]+Z, AB = p[A+1]+Z;
            const B = p[X+1]+Y, BA = p[B]+Z, BB = p[B+1]+Z;

            return lerp(w, lerp(v, lerp(u, grad(p[AA  ], x  , y  , z   ),
                                           grad(p[BA  ], x-1, y  , z   )),
                                   lerp(u, grad(p[AB  ], x  , y-1, z   ),
                                           grad(p[BB  ], x-1, y-1, z   ))),
                           lerp(v, lerp(u, grad(p[AA+1], x  , y  , z-1 ),
                                           grad(p[BA+1], x-1, y  , z-1 )),
                                   lerp(u, grad(p[AB+1], x  , y-1, z-1 ),
                                           grad(p[BB+1], x-1, y-1, z-1 ))));
        }

        function fade(t) { return t * t * t * (t * (t * 6 - 15) + 10); }
        function lerp(t, a, b) { return a + t * (b - a); }
        function grad(hash, x, y, z) {
            const h = hash & 15;
            const u = h<8 ? x : y;
            const v = h<4 ? y : h==12||h==14 ? x : z;
            return ((h&1) == 0 ? u : -u) + ((h&2) == 0 ? v : -v);
        }

        const p = new Array(512);
        for (let i=0; i<256; i++) p[i] = p[i+256] = Math.floor(Math.random() * 256);

        function animate() {
            ctx.fillStyle = 'rgba(0, 0, 0, 0.05)';
            ctx.fillRect(0, 0, width, height);

            particles.forEach(particle => {
                particle.update();
                particle.draw();
            });

            time += 0.002;
            requestAnimationFrame(animate);
        }

        function init() {
            for (let i = 0; i < numParticles; i++) {
                particles.push(new Particle());
            }
        }

        window.addEventListener('resize', resizeCanvas);
        resizeCanvas();
        init();
        animate();
    </script>
</body>
</html>